// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.Robot2017;

import org.frc1982.common.Goal;
import org.frc1982.common.vision.CameraView;
//import org.frc1982.common.vision.CameraView;
import org.usfirst.frc1982.Robot2017.commands.AutoTest;
import org.usfirst.frc1982.Robot2017.commands._CameraCenter;
import org.usfirst.frc1982.Robot2017.subsystems.*;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	
//	public static Mover driver;
	
	public static boolean shooterGoing = true;
	
	public static AnalogInput irSensor;
	
    Command autonomousCommand;
    public static ADIS16448_IMU gyro;
    
    public static CameraView cameraView;
	private VisionThread visionThread;
    
//    ///image processing variables
//    private static final ImageResolution iRes = ImageResolution.MEDIUM;
//    private AtomicInteger ctr = new AtomicInteger();
//	private VisionThread visionThread;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Winch winch;
    public static Intake intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    
    
    cameraView = new CameraView();
    visionThread = cameraView.getVisionThread();
    visionThread.start();
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        winch = new Winch();
        intake = new Intake();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        //initializing gyroscope and zeroing it out
        gyro = new ADIS16448_IMU();
        gyro.calibrate();
        gyro.reset();
        
        irSensor = RobotMap.irSensor;
        
        
        
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutoTest();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        
        
        
        
//        //basic camera server code to send an image to the smartdashboard and set the resolution and brightness
//        UsbCamera cam = CameraServer.getInstance().startAutomaticCapture();
//        cam.setBrightness(2);
//        cam.setResolution(320, 240);
//        
//        driver = new Mover(RobotMap.driveEncoderFrontLeft
//        		,RobotMap.driveEncoderFrontRight
//        		,RobotMap.driveEncoderBackLeft
//        		,RobotMap.driveEncoderBackRight
//        		,RobotMap.driveFrontLeft
//        		,RobotMap.driveFrontRight
//        		,RobotMap.driveBackLeft
//        		,RobotMap.driveBackRight);
        
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    }
    
    private void displayEncoderValues(boolean printToo) {
    	//printing distances from encoders:
    	SmartDashboard.putNumber("Front Right Encoder Distance", RobotMap.driveEncoderFrontRight.getDistance());
    	SmartDashboard.putNumber("Front Left Encoder Distance", RobotMap.driveEncoderFrontLeft.getDistance());
    	SmartDashboard.putNumber("Back Right Encoder Distance", RobotMap.driveEncoderBackRight.getDistance());
    	SmartDashboard.putNumber("Back Left Encoder Distance", RobotMap.driveEncoderBackLeft.getDistance());
    	
    	//printing counts from encoder
    	SmartDashboard.putNumber("Front Right Encoder count", RobotMap.driveEncoderFrontRight.get());
    	SmartDashboard.putNumber("Front Left Encoder count", RobotMap.driveEncoderFrontLeft.get());
    	SmartDashboard.putNumber("Back Right Encoder count", RobotMap.driveEncoderBackRight.get());
    	SmartDashboard.putNumber("Back Left Encoder count", RobotMap.driveEncoderBackLeft.get());
    	
    	//printing rates from encoder
    	SmartDashboard.putNumber("Front Right Encoder Rate", RobotMap.driveEncoderFrontRight.getRate());
    	SmartDashboard.putNumber("Front Left Encoder Rate", RobotMap.driveEncoderFrontLeft.getRate());
    	SmartDashboard.putNumber("Back Right Encoder Rate", RobotMap.driveEncoderBackRight.getRate());
    	SmartDashboard.putNumber("Back Left Encoder Rate", RobotMap.driveEncoderBackLeft.getRate());
    	if (printToo) { //if the values need to be printed to the console in addition to the smartdashboard
    		System.out.println("Front Right: " + RobotMap.driveEncoderFrontRight.get());
    		System.out.println("Front Left: " + RobotMap.driveEncoderFrontLeft.get());
    		System.out.println("Back Right: " + RobotMap.driveEncoderBackRight.get());
    		System.out.println("Back Left: " + RobotMap.driveEncoderBackLeft.get());
    	}
    }
    
    
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        //putting the gyro on the smartdashboard
        SmartDashboard.putData("IMU", gyro);
        
//        System.out.println("Front Right: " + RobotMap.driveEncoderFrontRight.get());
//        SmartDashboard.putNumber("Front Right Encoder Distance", RobotMap.driveEncoderFrontRight.getDistance());
        displayEncoderValues(false);
        
//        System.out.println(RobotMap.intakeLimitBot.get());
        
        //reading distance away from IR sensor
        double current = ((double) irSensor.getValue()) / 1000.0;
//        System.out.println(current);
//        double current = ((double) Robot.irSensor.getValue()) / 1000.0;
//    	if (current >= 1.6) {
//    		System.out.println("IR sensor within selected distance");
//    	}
    }

    public void autonomousInit() {
    	RobotMap.driveDriveTrain.setSafetyEnabled(true);
//    	RobotMap.driveDriveTrain.setSafetyEnabled(false);
        //resetting the encoders and gyro back to 0
    	RobotMap.driveEncoderBackRight.reset();
        RobotMap.driveEncoderBackLeft.reset();
        RobotMap.driveEncoderFrontRight.reset();
        RobotMap.driveEncoderFrontLeft.reset();
        
        //use method getAutonomousProgram to choose the autonomous program.
        autonomousCommand = getAutonomousProgram();
//        autonomousCommand = new AutoTest();
        if (autonomousCommand != null) autonomousCommand.start();
    }
    
    private Command getAutonomousProgram() {
    	/*
    	 *  The "Team Station" field in the Driver Station console sets the
    	 *  values for both alliance and position.
    	 */
    	DriverStation.Alliance alliance = DriverStation.getInstance().getAlliance();
    	System.out.println( "Alliance = " + alliance.name() );
    	
    	////Position on the driver station, however, is not necessarily where our robot will be on the field
//    	int position = DriverStation.getInstance().getLocation();
//    	System.out.println( "Driver Station Position = " + position );
    	
    	/*
    	 * The position the robot is in is determined by the switches on the Operator box
    	 */
    	int position = 0;
    	boolean left = oi.AutoOnLeft.get();
    	boolean right = oi.AutoOnRight.get();
    	if (!right && !left) { 
    		position = 2;
    	} //L0 + R0 = middle
    	else if ( (right && left) || right ) { 
    		position = 3;
    	} //L0 + R1 OR L1 + R1 = Right
    	else if (left) {
    		position = 1;
    	} //L1 + R0 = left
    	
    	/*
    	 * The Goal is set from one switch on the operator box.
    	 */
    	Goal g;
    	boolean gear = oi.AutoGearButton.get();
    	if (gear) {
    		g = Goal.GEAR;
    	} else {
    		g = Goal.DO_NOTHING;
    	}
//    	Goal g = goal.getSelected();
//    	System.out.println( "Selected Goal = " + g.getLabel() );
    	
    	/*
    	 * The AutonomousPrograms class encapsulates the logic to map from
    	 * alliance, position, and goal to the desired program.
    	 */
    	//TODO: write notes, make enumeration for position (also rename position variable to startingPosition or robotStartingPosition
    	return AutonomousPrograms.mapToProgram( alliance, position, g );
    }
    
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        displayEncoderValues(false);
        
        //giving smartdashboard the current readout from the gyro Z angle and the raw encoder value from each wheel
        SmartDashboard.putNumber("Raw Gyro Z", gyro.getAngleZ());
        SmartDashboard.putNumber("BackRightEncoder", RobotMap.driveEncoderBackRight.get());
        SmartDashboard.putNumber("BackLeftEncoder", RobotMap.driveEncoderBackLeft.get());
        SmartDashboard.putNumber("FrontRightEncoder", RobotMap.driveEncoderFrontRight.get());
        SmartDashboard.putNumber("FrontLeftEncoder", RobotMap.driveEncoderFrontLeft.get());
    }
    
    public void teleopInit() {
//    	RobotMap.driveDriveTrain.setSafetyEnabled(false);
    	RobotMap.driveDriveTrain.setSafetyEnabled(true);
    	
//    	new _CameraCenter(cameraView);
    	
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.driveEncoderBackRight.reset();
        RobotMap.driveEncoderBackLeft.reset();
        RobotMap.driveEncoderFrontRight.reset();
        RobotMap.driveEncoderFrontLeft.reset();
    }
    
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
//        SmartDashboard.putNumber("Front Right Encoder Distance", RobotMap.driveEncoderFrontRight.getDistance());
//        System.out.println("0,1 port Encoder output: " + RobotMap.driveEncoderFrontRight.get());
        displayEncoderValues(false);
        
        
//        System.out.println("Average Encoder Value: " + (RobotMap.driveEncoderBackLeft.get() + RobotMap.driveEncoderBackRight.get() + RobotMap.driveEncoderFrontLeft.get() + RobotMap.driveEncoderFrontRight.get()) / 4);
//        System.out.println("Gyro Z Angle/4: " + gyro.getAngleZ()/4);
        //giving smartdashboard the current readout from the gyro Z angle and the raw encoder value from each wheel
//        SmartDashboard.putNumber("Raw Gyro Z", gyro.getAngleZ());
//        SmartDashboard.putNumber("BackRightEncoder", RobotMap.driveEncoderBackRight.get());
//        SmartDashboard.putNumber("BackLeftEncoder", RobotMap.driveEncoderBackLeft.get());
//        SmartDashboard.putNumber("FrontRightEncoder", RobotMap.driveEncoderFrontRight.get());
//        SmartDashboard.putNumber("FrontLeftEncoder", RobotMap.driveEncoderFrontLeft.get());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
