// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.Robot2017;

import java.util.concurrent.atomic.AtomicInteger;

import org.usfirst.frc1982.Robot2017.commands.AutoTest;
import org.usfirst.frc1982.Robot2017.subsystems.Drive;
import org.usfirst.frc1982.Robot2017.subsystems.Shooter;
import org.usfirst.frc1982.Robot2017.subsystems.ShooterServoSystem;
import org.usfirst.frc1982.Robot2017.subsystems.Winch;

import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionThread;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static ADIS16448_IMU gyro;
    
//    ///image processing variables
//    private static final ImageResolution iRes = ImageResolution.MEDIUM;
//    private AtomicInteger ctr = new AtomicInteger();
//	private VisionThread visionThread;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Winch winch;
    public static Shooter shooter;
    public static ShooterServoSystem shooterServoSystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        winch = new Winch();
        shooter = new Shooter();
        shooterServoSystem = new ShooterServoSystem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutoTest();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        //initializing gyroscope and zeroing it out
        gyro = new ADIS16448_IMU();
        gyro.calibrate();
        gyro.reset();
        
        //basic camera server code to send an image to the smartdashboard and set the resolution and brightness
        UsbCamera cam = CameraServer.getInstance().startAutomaticCapture();
        cam.setBrightness(2);
        cam.setResolution(320, 240);
        
        
//        ////vision processing code
////      UsbCamera camera = CameraServer.getInstance().startAutomaticCapture(); //use this if you want an image in addition to the processed image
//        UsbCamera camera = new UsbCamera("USB Camera 0", 0); //use this if you only want to see processed images on the dashboard
//        camera.setResolution( iRes.getWidth(), iRes.getHeight() );
//        
//        
//        // Set the brightness, as a percentage (0-100).
//        camera.setBrightness(0);
//      
//        // Set the exposure to manual, as a percentage (0-100).
////      camera.setExposureManual(50);
//        
//        // Set the white balance to manual, with specified color temperature.
////      camera.setWhiteBalanceManual(50);
//      
//        CvSource outputStream = CameraServer.getInstance().putVideo( "Blur", iRes.getWidth(), iRes.getHeight() );
//        GripPipeline gp = new GripPipeline();
//        
//        visionThread = new VisionThread( camera, gp, pipeline -> {
//        	if (0 == ctr.incrementAndGet() % 50)
//      		{
////      			System.out.println( "Current frame... (" + ctr.get() + ")" );
////      			Utils.show( gp.filterContoursOutput() );
////      			double[] areas = table.getNumberArray("area", defaultValue);
//        		System.out.print("areas: ");
////      			for (double area : areas) {
////      				System.out.print(area + " \n");
////      			}
//      			System.out.println("");
//
//      			System.out.println( "Current frame... (" + ctr.get() + ")" );
//      			Utils.show( gp.filterContoursOutput() );
//
//      		}
//      		
//      		outputStream.putFrame( gp.hslThreshold1Output() );
////      		outputStream.putFrame( gp.maskOutput() );
////      		outputStream.putFrame( gp.rgbThresholdOutput() );
//      		
//        });
//        
//        visionThread.start();
        
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        //resetting the encoders and gyro back to 0
    	RobotMap.driveEncoderBackRight.reset();
        RobotMap.driveEncoderBackLeft.reset();
        RobotMap.driveEncoderFrontRight.reset();
        RobotMap.driveEncoderFrontLeft.reset();
        gyro.reset();
        //starting autonomous command (chosen in robot init)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        //giving smartdashboard the current readout from the gyro Z angle and the raw encoder value from each wheel
        SmartDashboard.putNumber("Raw Gyro Z", gyro.getAngleZ());
        SmartDashboard.putNumber("BackRightEncoder", RobotMap.driveEncoderBackRight.get());
        SmartDashboard.putNumber("BackLeftEncoder", RobotMap.driveEncoderBackLeft.get());
        SmartDashboard.putNumber("FrontRightEncoder", RobotMap.driveEncoderFrontRight.get());
        SmartDashboard.putNumber("FrontLeftEncoder", RobotMap.driveEncoderFrontLeft.get());
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.driveEncoderBackRight.reset();
        RobotMap.driveEncoderBackLeft.reset();
        RobotMap.driveEncoderFrontRight.reset();
        RobotMap.driveEncoderFrontLeft.reset();
        gyro.reset();
    }
    
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
//        System.out.println("Average Encoder Value: " + (RobotMap.driveEncoderBackLeft.get() + RobotMap.driveEncoderBackRight.get() + RobotMap.driveEncoderFrontLeft.get() + RobotMap.driveEncoderFrontRight.get()) / 4);
//        System.out.println("Gyro Z Angle/4: " + gyro.getAngleZ()/4);
        //giving smartdashboard the current readout from the gyro Z angle and the raw encoder value from each wheel
        SmartDashboard.putNumber("Raw Gyro Z", gyro.getAngleZ());
        SmartDashboard.putNumber("BackRightEncoder", RobotMap.driveEncoderBackRight.get());
        SmartDashboard.putNumber("BackLeftEncoder", RobotMap.driveEncoderBackLeft.get());
        SmartDashboard.putNumber("FrontRightEncoder", RobotMap.driveEncoderFrontRight.get());
        SmartDashboard.putNumber("FrontLeftEncoder", RobotMap.driveEncoderFrontLeft.get());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
