// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.Robot2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1982.Robot2017.Robot;
import org.usfirst.frc1982.Robot2017.RobotMap;

/**
 *
 */
public class _DriveEnableRaw extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public _DriveEnableRaw() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	oldTime = System.currentTimeMillis();
    	oldDist = 0.0;
    }
    
    private long oldTime;
    private double oldDist;
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	RobotMap.driveDriveTrain.mecanumDrive_Cartesian(Robot.oi.driverJoystick.getX(), Robot.oi.driverJoystick.getY(), Robot.oi.driverJoystick.getTwist()/2, 0);
//    	if (Robot.oi.driverJoystick.getY() > .95) {
    		double curDist = RobotMap.driveEncoderFrontLeft.getDistance();
    		long currentTime = System.currentTimeMillis();
    		
    		double difDist = curDist - oldDist;
    		long passed = currentTime - oldTime;
    		
    		System.out.println(Robot.oi.driverJoystick.getY());
    		
    		System.out.println("Encoder difference: " + difDist);
    		oldDist = curDist;

    		System.out.println("Time since: " + passed);
    		oldTime = currentTime;
//    	} else {
//    		RobotMap.driveEncoderFrontLeft.reset();
//    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
